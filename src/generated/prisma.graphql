# source: http://localhost:4466
# timestamp: Sat Oct 20 2018 07:56:51 GMT+0200 (South Africa Standard Time)

type AggregateGuest {
  count: Int!
}

type AggregateRsvp {
  count: Int!
}

type AggregateUser {
  count: Int!
}

enum AttendanceStatus {
  INVITED
  ACCEPTED
  DECLINED
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Guest implements Node {
  id: ID!
  firstname: String!
  lastname: String!
  dietry_note: String
  status: AttendanceStatus!
  email: String
  cell: String
}

"""A connection to a list of items."""
type GuestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GuestEdge]!
  aggregate: AggregateGuest!
}

input GuestCreateInput {
  firstname: String!
  lastname: String!
  dietry_note: String
  status: AttendanceStatus
  email: String
  cell: String
}

input GuestCreateManyInput {
  create: [GuestCreateInput!]
  connect: [GuestWhereUniqueInput!]
}

"""An edge in a connection."""
type GuestEdge {
  """The item at the end of the edge."""
  node: Guest!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GuestOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  dietry_note_ASC
  dietry_note_DESC
  status_ASC
  status_DESC
  email_ASC
  email_DESC
  cell_ASC
  cell_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GuestPreviousValues {
  id: ID!
  firstname: String!
  lastname: String!
  dietry_note: String
  status: AttendanceStatus!
  email: String
  cell: String
}

type GuestSubscriptionPayload {
  mutation: MutationType!
  node: Guest
  updatedFields: [String!]
  previousValues: GuestPreviousValues
}

input GuestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GuestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GuestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GuestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GuestWhereInput
}

input GuestUpdateDataInput {
  firstname: String
  lastname: String
  dietry_note: String
  status: AttendanceStatus
  email: String
  cell: String
}

input GuestUpdateInput {
  firstname: String
  lastname: String
  dietry_note: String
  status: AttendanceStatus
  email: String
  cell: String
}

input GuestUpdateManyInput {
  create: [GuestCreateInput!]
  connect: [GuestWhereUniqueInput!]
  disconnect: [GuestWhereUniqueInput!]
  delete: [GuestWhereUniqueInput!]
  update: [GuestUpdateWithWhereUniqueNestedInput!]
  upsert: [GuestUpsertWithWhereUniqueNestedInput!]
}

input GuestUpdateWithWhereUniqueNestedInput {
  where: GuestWhereUniqueInput!
  data: GuestUpdateDataInput!
}

input GuestUpsertWithWhereUniqueNestedInput {
  where: GuestWhereUniqueInput!
  update: GuestUpdateDataInput!
  create: GuestCreateInput!
}

input GuestWhereInput {
  """Logical AND on all given filters."""
  AND: [GuestWhereInput!]

  """Logical OR on all given filters."""
  OR: [GuestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GuestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstname: String

  """All values that are not equal to given value."""
  firstname_not: String

  """All values that are contained in given list."""
  firstname_in: [String!]

  """All values that are not contained in given list."""
  firstname_not_in: [String!]

  """All values less than the given value."""
  firstname_lt: String

  """All values less than or equal the given value."""
  firstname_lte: String

  """All values greater than the given value."""
  firstname_gt: String

  """All values greater than or equal the given value."""
  firstname_gte: String

  """All values containing the given string."""
  firstname_contains: String

  """All values not containing the given string."""
  firstname_not_contains: String

  """All values starting with the given string."""
  firstname_starts_with: String

  """All values not starting with the given string."""
  firstname_not_starts_with: String

  """All values ending with the given string."""
  firstname_ends_with: String

  """All values not ending with the given string."""
  firstname_not_ends_with: String
  lastname: String

  """All values that are not equal to given value."""
  lastname_not: String

  """All values that are contained in given list."""
  lastname_in: [String!]

  """All values that are not contained in given list."""
  lastname_not_in: [String!]

  """All values less than the given value."""
  lastname_lt: String

  """All values less than or equal the given value."""
  lastname_lte: String

  """All values greater than the given value."""
  lastname_gt: String

  """All values greater than or equal the given value."""
  lastname_gte: String

  """All values containing the given string."""
  lastname_contains: String

  """All values not containing the given string."""
  lastname_not_contains: String

  """All values starting with the given string."""
  lastname_starts_with: String

  """All values not starting with the given string."""
  lastname_not_starts_with: String

  """All values ending with the given string."""
  lastname_ends_with: String

  """All values not ending with the given string."""
  lastname_not_ends_with: String
  dietry_note: String

  """All values that are not equal to given value."""
  dietry_note_not: String

  """All values that are contained in given list."""
  dietry_note_in: [String!]

  """All values that are not contained in given list."""
  dietry_note_not_in: [String!]

  """All values less than the given value."""
  dietry_note_lt: String

  """All values less than or equal the given value."""
  dietry_note_lte: String

  """All values greater than the given value."""
  dietry_note_gt: String

  """All values greater than or equal the given value."""
  dietry_note_gte: String

  """All values containing the given string."""
  dietry_note_contains: String

  """All values not containing the given string."""
  dietry_note_not_contains: String

  """All values starting with the given string."""
  dietry_note_starts_with: String

  """All values not starting with the given string."""
  dietry_note_not_starts_with: String

  """All values ending with the given string."""
  dietry_note_ends_with: String

  """All values not ending with the given string."""
  dietry_note_not_ends_with: String
  status: AttendanceStatus

  """All values that are not equal to given value."""
  status_not: AttendanceStatus

  """All values that are contained in given list."""
  status_in: [AttendanceStatus!]

  """All values that are not contained in given list."""
  status_not_in: [AttendanceStatus!]
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  cell: String

  """All values that are not equal to given value."""
  cell_not: String

  """All values that are contained in given list."""
  cell_in: [String!]

  """All values that are not contained in given list."""
  cell_not_in: [String!]

  """All values less than the given value."""
  cell_lt: String

  """All values less than or equal the given value."""
  cell_lte: String

  """All values greater than the given value."""
  cell_gt: String

  """All values greater than or equal the given value."""
  cell_gte: String

  """All values containing the given string."""
  cell_contains: String

  """All values not containing the given string."""
  cell_not_contains: String

  """All values starting with the given string."""
  cell_starts_with: String

  """All values not starting with the given string."""
  cell_not_starts_with: String

  """All values ending with the given string."""
  cell_ends_with: String

  """All values not ending with the given string."""
  cell_not_ends_with: String
}

input GuestWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createRsvp(data: RsvpCreateInput!): Rsvp!
  createGuest(data: GuestCreateInput!): Guest!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateRsvp(data: RsvpUpdateInput!, where: RsvpWhereUniqueInput!): Rsvp
  updateGuest(data: GuestUpdateInput!, where: GuestWhereUniqueInput!): Guest
  deleteUser(where: UserWhereUniqueInput!): User
  deleteRsvp(where: RsvpWhereUniqueInput!): Rsvp
  deleteGuest(where: GuestWhereUniqueInput!): Guest
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertRsvp(where: RsvpWhereUniqueInput!, create: RsvpCreateInput!, update: RsvpUpdateInput!): Rsvp!
  upsertGuest(where: GuestWhereUniqueInput!, create: GuestCreateInput!, update: GuestUpdateInput!): Guest!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyRsvps(data: RsvpUpdateInput!, where: RsvpWhereInput): BatchPayload!
  updateManyGuests(data: GuestUpdateInput!, where: GuestWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyRsvps(where: RsvpWhereInput): BatchPayload!
  deleteManyGuests(where: GuestWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  rsvps(where: RsvpWhereInput, orderBy: RsvpOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rsvp]!
  guests(where: GuestWhereInput, orderBy: GuestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Guest]!
  user(where: UserWhereUniqueInput!): User
  rsvp(where: RsvpWhereUniqueInput!): Rsvp
  guest(where: GuestWhereUniqueInput!): Guest
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  rsvpsConnection(where: RsvpWhereInput, orderBy: RsvpOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RsvpConnection!
  guestsConnection(where: GuestWhereInput, orderBy: GuestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GuestConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Rsvp implements Node {
  id: ID!
  guests(where: GuestWhereInput, orderBy: GuestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Guest!]
}

"""A connection to a list of items."""
type RsvpConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RsvpEdge]!
  aggregate: AggregateRsvp!
}

input RsvpCreateInput {
  guests: GuestCreateManyInput
}

"""An edge in a connection."""
type RsvpEdge {
  """The item at the end of the edge."""
  node: Rsvp!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RsvpOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RsvpPreviousValues {
  id: ID!
}

type RsvpSubscriptionPayload {
  mutation: MutationType!
  node: Rsvp
  updatedFields: [String!]
  previousValues: RsvpPreviousValues
}

input RsvpSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RsvpSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RsvpSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RsvpSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RsvpWhereInput
}

input RsvpUpdateInput {
  guests: GuestUpdateManyInput
}

input RsvpWhereInput {
  """Logical AND on all given filters."""
  AND: [RsvpWhereInput!]

  """Logical OR on all given filters."""
  OR: [RsvpWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RsvpWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  guests_every: GuestWhereInput
  guests_some: GuestWhereInput
  guests_none: GuestWhereInput
}

input RsvpWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  rsvp(where: RsvpSubscriptionWhereInput): RsvpSubscriptionPayload
  guest(where: GuestSubscriptionWhereInput): GuestSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
